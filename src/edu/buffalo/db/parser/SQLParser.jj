PARSER_BEGIN(SQLParser)package edu.buffalo.db.parser;import java.util.Vector;import edu.buffalo.db.parser.sqlexpr.*;public class SQLParser{  public static void main(String args[])throws Exception{    try {      SQLParser sqlParser;      if (args.length == 0){        System.err.println("SQLParser: Reading from standard input . . .");        sqlParser = new SQLParser(System.in);      }      else if (args.length == 1){        System.err.println("SQLParser: Reading from file "+args[0]+" . . .");        sqlParser = new SQLParser(new java.io.FileInputStream(args[0]));      }      else {        System.err.println("SQLParser: Usage is one of:");        System.err.println("         java SQLParser < inputfile");        System.err.println("OR");        System.err.println("         java SQLParser inputfile ");        return ;      }      Vector<UnionExpr>unionExprs = sqlParser.getUnionExprs();      System.err.println("SQLParser: SQL expressions parsed successfully.");    }    catch (java.io.FileNotFoundException e){      System.err.println("SQLParser: File "+args[0]+" not found.");      return ;    }    catch (ParseException e){      System.err.println("SQLParser: Encountered exception during parsing."+e.getMessage());      return ;    }  }}PARSER_END(SQLParser)SKIP:{  " "  | "\t"  | "\n"  | "\r"  | "\f"}/* COMMENTS */MORE:{  "//":IN_SINGLE_LINE_COMMENT  | "%":IN_SINGLE_LINE_COMMENT}<IN_SINGLE_LINE_COMMENT>SPECIAL_TOKEN:{  <SINGLE_LINE_COMMENT:"\n"  | "\r"  | "\r\n"  | "EOF">:DEFAULT}<IN_SINGLE_LINE_COMMENT>SPECIAL_TOKEN:{  <~[]>}// SQL reserved keywords
TOKEN[IGNORE_CASE]:{  <SELECT:"SELECT">  | <FROM:"FROM">  | <UNIONALL:"UNION ALL">}/* Two kinds of LITERALS */TOKEN:{  <INTEGER_LITERAL:["1"-"9"](["0"-"9"])*>  | <STRING_LITERAL:"\""((~["\"", "\\", "\n", "\r"])  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]  | ["0"-"7"](["0"-"7"])?  | ["0"-"3"]["0"-"7"]["0"-"7"])))*"\"">}TOKEN:{  <NAME:(<LETTER>(<LETTER>  | <DIGIT>  | "_")*)>  | <#LETTER:["a"-"z", "A"-"Z"]>  | <#DIGIT:["0"-"9"]>}TOKEN:/* OPERATORS */{  <EQ:"=">}Vector<UnionExpr>getUnionExprs():{  Vector<UnionExpr>unionExprs = new Vector<UnionExpr>();  UnionExpr unionExpr;}{  unionExpr = unionExpr(){    unionExprs.add(unionExpr);  }  (unionExpr = unionExpr(){    unionExprs.add(unionExpr);  }  )*<EOF>{    return unionExprs;  }}UnionExpr unionExpr():{  UnionExpr unionExpr = new UnionExpr();  SQLExpr sqlExpr;}{  sqlExpr = sqlExpr(){    unionExpr.addSQLExpr(sqlExpr);  }  (<UNIONALL>sqlExpr = sqlExpr(){    unionExpr.addSQLExpr(sqlExpr);  }  )*";"{    return unionExpr;  }}SQLExpr sqlExpr():{  SQLExpr sqlExpr = new SQLExpr();}{  <SELECT>selectAtoms(sqlExpr)<FROM>fromAtoms(sqlExpr){    return sqlExpr;  }}void selectAtoms(SQLExpr sqlExpr):{  ColumnAtom colAtom;}{  colAtom = columnAtom(sqlExpr){    sqlExpr.addProjectionAtom(new ProjectionAtom(colAtom));  }  (","colAtom = columnAtom(sqlExpr){    sqlExpr.addProjectionAtom(new ProjectionAtom(colAtom));  }  )*}ColumnAtom columnAtom(SQLExpr sqlExpr):{  String tableStr = null;  String columnStr;}{  <NAME>{    tableStr = token.image;  }  "."<NAME>{    columnStr = token.image;    return new ColumnAtom(tableStr, columnStr);  }}void fromAtoms(SQLExpr sqlExpr):{  TableAtom tAtom;}{  tAtom = fromAtom(){    sqlExpr.addTableAtom(tAtom);  }}TableAtom fromAtom():{  String tableStr;  String aliasStr = null;}{  <NAME>{    tableStr = token.image;  }  <NAME>{    aliasStr = token.image;  }  {    return new TableAtom(tableStr, aliasStr);  }}