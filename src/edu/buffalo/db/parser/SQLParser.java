/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package edu.buffalo.db.parser;
import java.util.Vector;
import edu.buffalo.db.parser.sqlexpr.*;
public class SQLParser implements SQLParserConstants {
  public static void main(String args[])throws Exception{
    try {
      SQLParser sqlParser;
      if (args.length == 0){
        System.err.println("SQLParser: Reading from standard input . . .");
        sqlParser = new SQLParser(System.in);
      }
      else if (args.length == 1){
        System.err.println("SQLParser: Reading from file "+args[0]+" . . .");
        sqlParser = new SQLParser(new java.io.FileInputStream(args[0]));
      }
      else {
        System.err.println("SQLParser: Usage is one of:");
        System.err.println("         java SQLParser < inputfile");
        System.err.println("OR");
        System.err.println("         java SQLParser inputfile ");
        return ;
      }
      Vector<UnionExpr>unionExprs = sqlParser.getUnionExprs();
      System.err.println("SQLParser: SQL expressions parsed successfully.");
    }
    catch (java.io.FileNotFoundException e){
      System.err.println("SQLParser: File "+args[0]+" not found.");
      return ;
    }
    catch (ParseException e){
      System.err.println("SQLParser: Encountered exception during parsing."+e.getMessage());
      return ;
    }
  }

  static final public Vector<UnionExpr> getUnionExprs() throws ParseException {
  Vector<UnionExpr>unionExprs = new Vector<UnionExpr>();
  UnionExpr unionExpr;
    unionExpr = unionExpr();
    unionExprs.add(unionExpr);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      unionExpr = unionExpr();
    unionExprs.add(unionExpr);
    }
    jj_consume_token(0);
    {if (true) return unionExprs;}
    throw new Error("Missing return statement in function");
  }

  static final public UnionExpr unionExpr() throws ParseException {
  UnionExpr unionExpr = new UnionExpr();
  SQLExpr sqlExpr;
    sqlExpr = sqlExpr();
    unionExpr.addSQLExpr(sqlExpr);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIONALL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(UNIONALL);
      sqlExpr = sqlExpr();
    unionExpr.addSQLExpr(sqlExpr);
    }
    jj_consume_token(19);
    {if (true) return unionExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public SQLExpr sqlExpr() throws ParseException {
  SQLExpr sqlExpr = new SQLExpr();
    jj_consume_token(SELECT);
    selectAtoms(sqlExpr);
    jj_consume_token(FROM);
    fromAtoms(sqlExpr);
    {if (true) return sqlExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public void selectAtoms(SQLExpr sqlExpr) throws ParseException {
  ColumnAtom colAtom;
    colAtom = columnAtom(sqlExpr);
    sqlExpr.addProjectionAtom(new ProjectionAtom(colAtom));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(20);
      colAtom = columnAtom(sqlExpr);
    sqlExpr.addProjectionAtom(new ProjectionAtom(colAtom));
    }
  }

  static final public ColumnAtom columnAtom(SQLExpr sqlExpr) throws ParseException {
  String tableStr = null;
  String columnStr;
    jj_consume_token(NAME);
    tableStr = token.image;
    jj_consume_token(21);
    jj_consume_token(NAME);
    columnStr = token.image;
    {if (true) return new ColumnAtom(tableStr, columnStr);}
    throw new Error("Missing return statement in function");
  }

  static final public void fromAtoms(SQLExpr sqlExpr) throws ParseException {
  TableAtom tAtom;
    tAtom = fromAtom();
    sqlExpr.addTableAtom(tAtom);
  }

  static final public TableAtom fromAtom() throws ParseException {
  String tableStr;
  String aliasStr = null;
    jj_consume_token(NAME);
    tableStr = token.image;
    jj_consume_token(NAME);
    aliasStr = token.image;
    {if (true) return new TableAtom(tableStr, aliasStr);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SQLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x1000,0x100000,};
   }

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
